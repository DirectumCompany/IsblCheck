/* ------------------------------------------------------------------------------------
 * Файл сгенерирован утилитой GenerateSbrteClasses. 
 * Для актуализации файла нужно обновить исходные данные и библиотеки утилиты
 * с последнего билда IS-Builder 7, запустить утилиту и обновить сгенерированные файлы.
 * ------------------------------------------------------------------------------------ 
 */

// ReSharper disable InconsistentNaming

using System;

namespace IsblCheck.Context.Application
{
  // TODO: При хранении системных функций в таком виде нельзя указать значения по умолчанию.

  internal interface Functions
  {
    object AddSubString(string SubString, string String, string Delimiter);
    object AdjustLineBreaks(string Text);
    object AmountInWords(float Amount);
    object Analysis(string ObjectName, string ViewMode);
    object ArrayDimCount(object Array);
    object ArrayHighBound(object Array, int DimensionIndex);
    object ArrayLowBound(object Array, int DimensionIndex);
    object ArrayOf(object Elements);
    object ArrayReDim(object Array, int DimensionIndex, int NewLowBound, int NewHighBound);
    object Assert(bool Expression, string Message);
    object Assigned(object Variant);
    object BeginOfMonth(int Step, DateTime Date);
    object BeginOfPeriod(string PeriodType);
    object BuildProfilingOperationAnalysis(DateTime BeginOfPeriod, DateTime EndOfPeriod);
    object CallProcedure(string DLL, string Function, string DataTypes, object Arguments);
    object CanReadFile(string FileName);
    object CArrayElement(object Array, bool ShowProgress);
    object CDataSetRequisite(object DataSet, bool ShowProgress);
    object ChangeDate(string Part, DateTime Date, int Value);
    object ChangeReferenceDataset(string AddSelect, string AddFrom, string AddWhere, string AddJoin);
    object ChangeTime(string TimePart, float Number, DateTime Date);
    object Char(int SymbolCode);
    object CharPos(string SubString, string String);
    object CheckParam(string ParamName, string ParamValue, string ParamType, string Required, string Delimiter);
    object CheckParamValue(string ParamValue, string Type, string ExtraType);
    object CompareStrings(string String1, string String2, int StringsSortType);
    object ConstantExists(string ConstantName);
    object ControlState();
    object ConvertDateStr(string Date, int FromDateFormatType, int ToDateFormatType, int FromCultureType, int ToCultureType);
    object ConvertTimeBetweenTimeZones(DateTime DateTime, string SourceTimeZoneID, string TargetTimeZoneID, bool NeedChangeEmptyTime);
    object Copy(string String, int Index, int Length);
    object CopyFile(string FromFileName, string ToFileName);
    object CreateArray(int Bounds);
    object CreateCachedReference(string Name, bool NeedCheckAccessRights, object Connection, bool FullCache);
    object CreateConnection(string SystemCode, string ConnectParams, string FormCaption);
    object CreateDialog(string Name, string Params);
    object CreateDualListDialog(string Name);
    object CreateEditor(string SyntaxMode);
    object CreateException(string Name, string Message, int Category);
    object CreateFile(string Name, string Mode);
    object CreateFolderDialog(object ParentForm);
    object CreateInputDialog(string Labels, string DefaultValues, string Types, string FormCaption, DateTime BeginOfPeriod, DateTime EndOfPeriod, string Name, bool NeedShowHelpButton, string Names, string SaveValuesFlags, string CallID);
    object CreateLinkFile(string SystemCode, int ComponentType, int ID, string ComponentName, string ViewName, string FileName, object ComponentParams);
    object CreateList();
    object CreateLock(int ObjectType, int ObjectID);
    object CreateMemoryDataSet(string FileName, string NodeName, object Connection);
    object CreateObject(string ClassName);
    object CreateOpenDialog(object ParentForm);
    object CreateProgress(string Caption, int Max, bool IsBreakable, string BreakProcessText, int TextLineCount);
    object CreateQuery(object Connection, object ConnectionIntent);
    object CreateReference(string Name, object RequisitesFilter, bool NeedCheckAccessRights, object Connection);
    object CreateReport(string Name, bool NeedCheckAccessRights, object Connection);
    object CreateSaveDialog(object ParentForm);
    object CreateScript(string Name, bool NeedCheckAccessRights, object Connection);
    object CreateSQLPivotFunction(object DataSet, object RequisiteNames, bool IsRefRequisites);
    object CreateStringList();
    object CreateTreeListSelectDialog(string WindowTitle);
    object CSelectSQL(string WindowTitle, string Query, string RowDelimiter, string DefaultValue);
    object CSQL(string Query, string Alias, string RowDelimiter, object Connection, bool IsIndicatorShow, object ConnectionIntent, string SourceTimeZoneID, string TargetTimeZoneID, object IgnoreConversionOnEmptyTimeFieldNames);
    object CSubString(string String, string Delimiter);
    object CurrentUserID(string System);
    object CurrentUserName(string System);
    object CurrentVersion();
    object DataSetLocateEx(object DataSet, object RequisiteNames, object RequisiteValues, bool CaseSensitive, bool PartialKey);
    object DateDiff(string Part, DateTime Date1, DateTime Date2);
    object DateTimeDiff(string Part, DateTime DateTime1, DateTime DateTime2);
    object DateToStr(DateTime Date, int DateFormatType, int CultureType);
    object DayOfWeek(DateTime Date);
    object DeleteFile(string FileName);
    object DirectoryExists(string DirectoryName);
    object DisableCheckAccessRights(object Factory);
    object DisableCheckFullShowingRestriction(object Reference);
    object DisableMassTaskSendingRestrictions(object Task);
    object DropTable(string Name);
    object DupeString(string String, int Count);
    object EditText(string Text);
    object EnableCheckAccessRights(object Factory);
    object EnableCheckFullShowingRestriction(object Reference);
    object EnableMassTaskSendingRestrictions(object Task);
    object EndOfMonth(int Step, DateTime Date);
    object EndOfPeriod(string PeriodType);
    object EscapeJSONSpecialCharacters(string String);
    object ESCheckPlayMode();
    object ESDetectShortLang(string AText);
    object ESDocumentToJSON(object Doc, string AdditionalFields);
    object ESDocumentVersionAsBase64(object Version);
    object ESExecuteRequest(string Method, string Path, string API, string Params, string Body);
    object ESRequisiteToJSON(object Req);
    object ESTaskToJSON(object Task, int JobID);
    object ESTaskToJSONBulk(string IndexName, object Task, string PipelineName);
    object ESVersionToJSON(object Version, string AdditionalFields);
    object ExceptionExists();
    object ExceptionsOff();
    object ExceptionsOn();
    object Execute(string Text);
    object ExecuteProcess(string CommandLine, string ShowMode, string WaitMode, int TimeOut);
    object Exit(string Message);
    object ExpandEnvironmentVariables(string SourceString);
    object ExtractFileDrive(string FileName);
    object ExtractFileExt(string FileName);
    object ExtractFileName(string FileName);
    object ExtractFilePath(string FileName);
    object ExtractParams(string ParamsThreshold);
    object FileExists(string FileName);
    object FileSize(string FileName);
    object FindFile(string Wildcard, string Mode);
    object FindSubString(string SubString, string String, string Delimiter);
    object FirmContext(string Organization, bool RestoreFirmContext);
    object ForceDirectories(string FolderName);
    object Format(string Template, object Args);
    object FormatDate(string Format, DateTime Date);
    object FormatNumeric(string Format, float Value);
    object FormatSQLDate(DateTime Date);
    object FormatString(string Format, string String);
    object FreeException();
    object GetComponent();
    object GetConstant(string ConstantName, string DefaultValue, string Organization, bool RaiseException);
    object GetLastException();
    object GetReferenceRecord(string Name, string RecordCode);
    object GetRefTypeByRefID(int ID);
    object GetTableID(object Connection, string TableName);
    object GetTempFolder();
    object IfThen(bool Condition, object TrueResult, object FalseResult);
    object In(object Array, object Value, bool ExactMatch);
    object IndexOf(object Array, object Value, bool ExactMatch);
    object InputDialog(string Labels, string DefaultValues, string Types, string FormCaption, DateTime BeginOfPeriod, DateTime EndOfPeriod, string Name, bool NeedShowHelpButton, string SaveValuesFlags, string CallID);
    object InputDialogEx(string Labels, string DefaultValues, string Types, string FormCaption, DateTime BeginOfPeriod, DateTime EndOfPeriod, string Mode, string Buttons, string DefaultButton, string CancelButton, string Name, bool NeedShowHelpButton, string SaveValuesFlags, string CallID);
    object InteractiveMode();
    object IsFileLocked(string FileName);
    object IsGraphicFile(string FileName);
    object IsNumeric(object Variable);
    object JSONToObject(string JSON);
    object Length(string String);
    object LoadString(string Name, string GroupCode, string LanguageCode);
    object LoadStringFmt(string Name, string GroupCode, object Args, string LanguageCode);
    object LocalTimeToUTC(DateTime LocalTime);
    object LowerCase(string String);
    object Max(float Value1, float Value2);
    object MessageBox(string Title, string Message, string Buttons, string DefaultButton, string ESCButton);
    object MessageBoxEx(string Title, string Message, string Header, string Buttons, string CheckboxCaption, string Details, string Footer, object ButtonStyle, string DefaultButton, string ESCButton, bool CheckboxState);
    object MimeDecodeBinary(string EncodedData);
    object MimeDecodeString(string EncodedString);
    object MimeEncodeBinary(object SourceData);
    object MimeEncodeFile(string FileName);
    object MimeEncodeString(string SourceString);
    object Min(float Value1, float Value2);
    object MoneyInWords(float Sum);
    object MoveFile(string FromFileName, string ToFileName);
    object NeedSoftResetServerEvent(object Parameters, int Times);
    object NewID();
    object Now(int TimeType);
    object OpenFile(string FileName, string Mode, string Wait, int WaitMode);
    object Ord(string Character);
    object Precision(int Digits);
    object Raise(object Exception);
    object ReadCertificateFromFile(string FileName, string View, int Mode, string PluginName);
    object ReadFile(string FileName);
    object ReferenceCodeByID(int ID);
    object ReferenceNumber(string ReferenceType, string Number, string OurCompanies);
    object ReferenceRequisiteMode(string Requisite, string Mode);
    object ReferenceRequisiteValue(string ReferenceType, string Code, string Requisite, int LineNumber, string Value, string Events);
    object RegionDateSettings(int Setting);
    object RegionNumberSettings(int Setting);
    object RegionTimeSettings(int Setting);
    object RegRead(string Key, string Section, bool Exception);
    object RegWrite(string Key, string Section, string Value);
    object RemoveControlCharacters(string String);
    object RenameFile(string OldFileName, string NewFileName);
    object Replace(string Text, string FromText, string ToText);
    object RGB(int Red, int Green, int Blue);
    object Round(float Value, int Precision);
    object SelectServerCode(object CurrentSelectMode, object ServerCodeRequisite, string InputValue);
    object SelectSQL(string WindowTitle, string ColumnNames, string Query, string Sort, string RowSeparator, string ColumnSeparator, string CallID, string DefaultVisibleColumns, string ReturnedColumns, int SelectionMode, string KeyFields, string MarkedRecords);
    object ServerDateTime(int CultureType);
    object SetConstant(string ConstantName, string NewValue, string Organization);
    object SetFolderRefreshInfo(object Folder, object UpdatedContents, object DeletedContents, bool FullRefresh);
    object ShowConstantsInputDialog(string ConstantNames, string ConstantCaptions, string ConstantTypes, string FormCaption);
    object ShowMessage(string Message);
    object Sleep(float Seconds);
    object Split(string String, int Length, int Index);
    object SQL(string Query, string Alias, string RowDelimiter, string ColumnDelimiter, object Connection, object ConnectionIntent, string SourceTimeZoneID, string TargetTimeZoneID, object IgnoreConversionOnEmptyTimeFieldNames);
    object SQL2XLSTAB(string Query, string ColumnNames, string RowDelimiter, string ColumnDelimiter, object Connection, object ConnectionIntent, string SourceTimeZoneID, string TargetTimeZoneID, object IgnoreConversionOnEmptyTimeFieldNames);
    object SQLProfilingSendReport(string Subject, string Text, object ReportFiles, string Recipients, int SQLProfilingAnalyzeSettingsID);
    object StrToDate(string Date, int DateFormatType, int CultureType);
    object SubString(string String, string Delimiter, int Index);
    object SubStringCount(string String, string Delimiter);
    object SystemSetting(string SettingName, string NewValue, string UserName);
    object Time();
    object TimeDiff(string Part, string Time1, string Time2);
    object Today();
    object Transliterate(string String, bool SkipSpecialChars, int TransliterationStandard);
    object Trim(string String);
    object UpperCase(string String);
    object UserStatus(string UserID);
    object UTCToLocalTime(DateTime TimeInUTC);
    object ValidateXML(string XML, string Schema);
    object VarIsClear(object Variant);
    object VarIsEmpty(object Variant);
    object VarIsNull(object Variant);
    object VarType(object Variable);
    object WorkTimeDiff(DateTime StartTime, DateTime EndTime, object User, string UnitMeasure);
    object WriteFile(string FileName, string Mode, string Data);
    object WriteFileEx(string FileName, string Mode, string Data, int WaitTimeout);
    object WriteObjectHistory(int ComponentType, int ObjectID, string DetailInfo);
    object Анализ(string Имя_Объекта, string Режим);
    object БазаДанных();
    object БлокЕсть(string Код_Объекта);
    object БлокЕстьРасш(string КодОбъекта, int ИДПроцесса);
    object БлокИнфо(string Код_Объекта);
    object БлокСнять(string Код_Объекта);
    object БлокСнятьРасш(string КодОбъекта, int ИДПроцесса);
    object БлокУстановить(string Код_Объекта);
    object Ввод(string Метки, string Нач_Значения, string Типы, string ЗаголовокОкна, DateTime НачалоДействия, DateTime ОкончаниеДействия, string Имя, bool НужноПоказКнСправка, string ПризнакиСохраненияЗначений, string ИДВызова);
    object ВводМеню(string Метки, string Нач_Значения, string Типы, string ЗаголовокОкна, DateTime НачалоДействия, DateTime ОкончаниеДействия, string Режимы, string СписокКнопок, string КнПоУмолч, string КнДляEsc, string Имя, bool НужноПоказКнСправка, string ПризнакиСохраненияЗначений, string ИДВызова);
    object ВедС();
    object ВедСпр(string Вид_Аналитики, string Код_Аналитики);
    object ВерхняяГраницаМассива(object Массив, int ИндИзмерения);
    object ВнешПрогр(string Командная_строка, string Режим);
    object Восст(string Идентификатор);
    object ВременнаяПапка();
    object Время();
    object ВыборSQL(string ЗаголовокОкна, string НазванияКолонок, string Запрос, string Сортировка, string РазделительСтрок, string РазделительКолонок, string ИДВызова, string ВидимыеКолонкиПоУмолчанию, string ВозвращаемыеКолонки, int РежимВыбора, string КлючевыеПоля, string ОтмеченныеЗаписи);
    object ВыбратьЗапись(string Значение, string Таблица, string ПолеНаим, string ПолеКод, string ЗаголовокОкна, string ЗначВосст, string Select, string НаимКолонок, string From, string Where, string Режим);
    object ВыделитьСтр(string Строка, int Начало, int Длина);
    object Вызвать(string Библиотека, string Функция, string ТипыДанных, object Аргументы);
    object Выполнить(string Текст);
    object ВыпПрогр(string КоманднаяСтрока, string РежимЗапуска, string РежимОжидания, int ВремяОжидания);
    object ГрафическийФайл(string ИмяФайла);
    object ГруппаДополнительно(int ГруппаПольз);
    object ДатаВремяСерв(int ТипКультуры);
    object ДеньНедели(DateTime Дата);
    object ДиалогДаНет(string Текст, string Заголовок, string КнопкаПоУмолч);
    object ДлинаСтр(string Строка);
    object ДобПодстр(string Подстрока, string Строка, string Разделитель);
    object ЕПусто(object Variant);
    object ЕслиТо(bool Condition, object TrueResult, object FalseResult);
    object ЕЧисло(object Переменная);
    object ЗамПодстр(string ИсходнСтрока, string СтарПодстр, string НовПодстр);
    object ЗаписьСправочника(string Name, string RecordCode);
    object ЗначПоляСпр(string Вид_Аналитики, string Код_Аналитики, string ИмяПоля, int Ном_Строки);
    object ИДТипСпр(string Вид_аналитики);
    object ИзвлечьДиск(string ИмяФайла);
    object ИзвлечьИмяФайла(string FileName);
    object ИзвлечьПуть(string FileName);
    object ИзвлечьРасширение(string FileName);
    object ИзмДат(string Часть, DateTime Дата, int Значение);
    object ИзменитьРазмерМассива(object Массив, int ИндИзмерения, int НовНижнГраница, int НовВерхГраница);
    object ИзмеренийМассива(object Массив);
    object ИмяОрг(string НашаОрг);
    object ИмяПоляСпр(string Код_Реквизита);
    object Индекс(object Массив, object Значение, bool ТочноеСовпадение);
    object ИндикаторЗакрыть(string ИндИдент);
    object ИндикаторОткрыть(string Заголовок, int МаксЗнач, int Шаг, string Прерываемый);
    object ИндикаторШаг(string ИндИдент);
    object ИнтерактивныйРежим();
    object ИтогТблСпр(string Вид_Аналитики, string Код_Аналитики, string Код_Реквизита);
    object КодВидВедСпр(string Вид_Аналитики, string Режим);
    object КодВидСпрПоИД(int ИД);
    object КодПоAnalit(int Analit);
    object КодСимвола(string Character);
    object КодСпр(string Вид_Аналитики, string Наименование_Аналитики, string Наименование_Вед_Аналитики, string Организация);
    object КолПодстр(string Строка, string Разделитель);
    object КолПроп(float Количество);
    object КонМес(int Смещение, DateTime Дата);
    object Конст(string Имя_Константы, string Значение, string Организация);
    object КонстЕсть(string Константа);
    object КонстЗнач(string Константа, string Значение, string Организация);
    object КонТран(int ИДСоединения);
    object КопироватьФайл(string ФайлИсточник, string ФайлПриемник);
    object КопияСтр(string Строка, int Количество);
    object КПериод(string ТипПериода);
    object КСтрТблСпр(string Вид_Аналитики, string Код_Аналитики, int Номер_Таблицы);
    object Макс(float Число1, float Число2);
    object МаксСтрТблСпр(string Вид_Аналитики, string Код_Аналитики, int Номер_Таблицы);
    object Массив(object Элементы);
    object Меню(string Заголовок, string ТекстСообщения, string СписокКнопок, string КнПоУмолч, string КнДляEsc);
    object МенюРасш(string Заголовок, string ТекстСообщения, string ТекстВыдСообщения, string СписокКнопок, string ТекстФлажка, string ТекстПодробнее, string ТекстПодножья, object СтильКнопок, string КнПоУмолч, string КнДляEsc, bool ЗначениеФлажка);
    object Мин(float Число1, float Число2);
    object НаборДанныхНайтиРасш(object НаборДанных, object Реквизиты, object Значения, bool РегистроЗависимый, bool ЧастичныйКлюч);
    object НаимВидСпр(string КодВидАн);
    object НаимПоAnalit(int Analit);
    object НаимСпр(string Вид_Аналитики, string Код_Аналитики);
    object НастроитьПереводыСтрок(string Текст);
    object НачМес(int Смещение, DateTime Дата);
    object НачТран(int ИДСоединения, string Отложенная);
    object НижняяГраницаМассива(object Массив, int ИндИзмерения);
    object НомерСпр(string Вид_Аналитики, string Номер, string Организация);
    object НПериод(string ТипПериода);
    object Окно(string Сообщение);
    object Окр(float Число, int Точность);
    object Окружение(string Переменная, string Значение);
    object ОтлИнфДобавить(string Информация);
    object ОтлИнфУдалить();
    object Отчет(string Имя_отчета, string Режим, string УчРазд, string РасчПарам, string Имя_Файла);
    object ОтчетАнал(string Имя_отчета, string Режим, string УчРазд, string РасчПарам, string Имя_Файла);
    object ОтчетИнт(string Имя_отчета, string Режим, string РасчПарам, string Имя_Файла);
    object ПапкаСуществует(string ИмяПапки);
    object Пауза(float Seconds);
    object ПВыборSQL(string ЗаголовокОкна, string Запрос, string РазделительСтрок, string ЗначУмолч);
    object ПереименоватьФайл(string СтароеИмя, string НовоеИмя);
    object Переменные(string Список);
    object ПереместитьФайл(string ФайлИсточник, string ФайлПриемник);
    object Подстр(string Строка, string Разделитель, int Ном_Подстроки);
    object ПоискПодстр(string Подстрока, string Строка, string Разделитель);
    object ПоискСтр(string Подстрока, string Строка);
    object ПолучитьИДТаблицы(object Connection, string TableName);
    object ПользовательДополнительно(string СетИмя);
    object ПользовательИД(string Система);
    object ПользовательИмя(string Система);
    object ПользовательСтатус(string Пользователь);
    object Прервать(string Сообщение);
    object ПроверитьПараметр(string НаимПарам, string ЗначПарам, string ТипПарам, string Обязательный, string Разд);
    object ПроверитьПараметрЗнач(string ЗначПарам, string Тип, string ДопТип);
    object ПроверитьУсловие(bool Условие, string Сообщение);
    object РазбСтр(string Строка, int Длина, int Ном_Подстроки);
    object РазнВремя(string Часть, string Время1, string Время2);
    object РазнДат(string Часть, DateTime Дата1, DateTime Дата2);
    object РазнДатаВремя(string Часть, DateTime ДатаВремя1, DateTime ДатаВремя2);
    object РазнРабВремя(DateTime ВремяНачало, DateTime ВремяКонец, object Пользователь, string ЕдиницаИзмерения);
    object РегУстВрем(int Уст);
    object РегУстДат(int Уст);
    object РегУстЧсл(int Уст);
    object РедТекст(string Текст);
    object РеестрЗапись(string Ключ, string Переменная, string Значение);
    object РеестрСписокИменПарам(string Ключ, string Разд, bool Исключение);
    object РеестрЧтение(string Ключ, string Переменная, bool Исключение);
    object РеквСпр(string Вид_Аналитики, string Код_Аналитики, string Код_Реквизита, int Ном_Строки, string Значение);
    object РеквСпрПр(string Вид_аналитики, string Код_аналитики, string Код_Реквизита, float Номер_Строки, string Значение);
    object Сегодня();
    object Сейчас(int ТипВремени);
    object Сервер();
    object СерверПроцессИД();
    object СертификатФайлСчитать(string ИмяФайла, string Просмотр, int Режим, string МодульРасширения);
    object СжПроб(string Строка);
    object Символ(int КодСимвола);
    object СистемаДиректумКод();
    object СистемаИнформация(string КодСист);
    object СистемаКод();
    object Содержит(object Массив, object Значение, bool ТочноеСовпадение);
    object СоединениеЗакрыть(int ИДСоединения);
    object СоединениеОткрыть(string КодСистемы);
    object СоздатьДиалог(string Name, string Params);
    object СоздатьДиалогВыбораИзДвухСписков();
    object СоздатьДиалогВыбораПапки(object РодительскаяФорма);
    object СоздатьДиалогОткрытияФайла(object РодительскаяФорма);
    object СоздатьДиалогСохраненияФайла(object РодительскаяФорма);
    object СоздатьЗапрос(object Connection, object ConnectionIntent);
    object СоздатьИндикатор(string Caption, int Max, bool IsBreakable);
    object СоздатьИсключение(string Имя, string Сообщение, int Категория);
    object СоздатьКэшированныйСправочник(string Имя, bool ПроверятьПраваДоступа, object Соединение, bool ПолноеКэширование);
    object СоздатьМассив(int Границы);
    object СоздатьНаборДанных(string FileName, string NodeName, object Connection);
    object СоздатьОбъект(string ClassName);
    object СоздатьОтчет(string Name, bool NeedCheckAccessRights, object Connection);
    object СоздатьПапку(string ИмяПапки);
    object СоздатьРедактор(string SyntaxMode);
    object СоздатьСоединение(string SystemCode, string ConnectParams, string FormCaption);
    object СоздатьСписок();
    object СоздатьСписокСтрок();
    object СоздатьСправочник(string Name, object RequisitesFilter, bool NeedCheckAccessRights, object Connection);
    object СоздатьСценарий(string Name, bool NeedCheckAccessRights, object Connection);
    object СоздСпр(string Вид_Анал, string Наим_Анал, string Вед_Анал, string Код_Ан, string Организация);
    object СостСпр();
    object Сохр(string Идентификатор, string Выражение);
    object СохрСпр();
    object СписокСистем();
    object Спр(string Вид_Аналитики, string Вед_Аналитика, string Организация);
    object Справочник(string ВидАн, string ЗначУмолч, string AddSelect, string AddFrom, string AddWhere, string Режим, string ВозврРекв, string Разд_Строк, string Разд_Колонок, DateTime НачИнтрв, DateTime ОкнчИнтрв, string ЗагОкна, string Парам, string Представление, string AddLike, int ИДТек, bool ИспЗапретПросмотра, string AddJoin);
    object СпрБлокЕсть(string Вид, string Код);
    object СпрБлокСнять(string Вид, string Код);
    object СпрБлокСнятьРасш(string Вид, string Код, int ИДПроцесса);
    object СпрБлокУстановить(string Вид, string Код);
    object СпрИзмНабДан(string AddSelect, string AddFrom, string AddWhere, string AddJoin);
    object СпрКод(string Вид_Аналитики, string Наименование_Аналитики, string Код_Вед_Аналитики, string Организация);
    object СпрНомер(string Вид, string Номер, string Организация);
    object СпрОбновить();
    object СпрОткрыть(string Вид, string Код, string События, string Реквизиты);
    object СпрОтменить(string Вид, string Код, string События);
    object СпрПарам(string Идентификатор);
    object СпрПолеЗнач(string Вид_Аналитики, string Код_Аналитики, string ИмяПоля, int Ном_Строки);
    object СпрПолеИмя(string Код_Реквизита);
    object СпрРекв(string Вид, string Код, string Реквизит, int НомерСтроки, string Значение, string События);
    object СпрРеквВведЗн(string Реквизит);
    object СпрРеквНовые();
    object СпрРеквПр(string Вид, string Код, string Реквизит, int НомерСтроки, string Значение, string События);
    object СпрРеквПредЗн(string Реквизит, int НомерСтроки);
    object СпрРеквРежим(string Реквизит, string Режим);
    object СпрРеквТипТекст(string Вид, string Код, string Реквизит, int НомерСтроки, string Тип_Данных);
    object СпрСоздать(string Вид, string Код, string События, string Реквизиты, string НашаОрг);
    object СпрСост(string Вид_Аналитики, string Код_Аналитики, string Состояние);
    object СпрСохранить(string Вид, string Код, string События, string Утверждать, string ВозврРекв);
    object СпрТблИтог(string Вид_Аналитики, string Код_Аналитики, string Код_Реквизита);
    object СпрТблСтр(string Вид_Аналитики, string Код_Аналитики, int Номер_Таблицы, string По_номеру, bool Показывать_Прогресс);
    object СпрТблСтрКол(string Вид_Аналитики, string Код_Аналитики, int Номер_Таблицы);
    object СпрТблСтрМакс(string Вид_Аналитики, string Код_Аналитики, int Номер_Таблицы);
    object СпрТблСтрМин(string Вид_Аналитики, string Код_Аналитики, int Номер_Таблицы);
    object СпрТблСтрПред(string Вид_Аналитики, string Код_Аналитики, int Номер_Таблицы, int Номер_Строки);
    object СпрТблСтрСлед(string Вид_Аналитики, string Код_Аналитики, int Номер_Таблицы, int Номер_Строки);
    object СпрТблСтрСозд(string Вид, string Код, int Ном_таблицы, int НомерСтроки, string События);
    object СпрТблСтрУд(string Вид, string Код, int Ном_таблицы, int НомерСтроки, string События);
    object СпрТекПредст();
    object СпрУдалить(string Вид, string Код, string События, string Реквизиты);
    object СравнитьСтр(string Стр1, string Стр2, int ТипСортировки);
    object СтрВерхРегистр(string Строка);
    object СтрНижнРегистр(string Строка);
    object СтрТблСпр(string Вид_Аналитики, string Код_Аналитики, int Номер_Таблицы, string По_номеру, bool Показывать_Прогресс);
    object СумПроп(float Сумма);
    object Сценарий(string ИмяРасч, string РасчПарам);
    object СценарийПарам(string ИмяПар);
    object ТекВерсия();
    object ТекОрг(string Организация, bool ВосстановитьОрг);
    object Точн(int Точность);
    object Тран(int ИДСоединения);
    object Транслитерация(string Строка, bool ПропускатьСпецСимволы, int СтандартТранслитерации);
    object УдалитьТаблицу(string Имя);
    object УдалитьФайл(string FileName);
    object УдСпр(string Вид_Аналитики, string Код_Аналитики);
    object УдСтрТблСпр(string Вид_Аналитики, string Код_Аналитики, int Номер_Таблицы, int Номер_Строки);
    object Уст(string ИмяПеременной, string ЗначениеПеременной, string ИмяПользователя);
    object УстановкиКонстант(string СписокКонстант, string СписокНазваний, string СписокТипов, string ЗаголовокОкна);
    object ФайлАтрибутСчитать(string Файл);
    object ФайлАтрибутУстановить(string Файл, string Атрибут);
    object ФайлВремя(string ИмяФайла, string ТипВремени);
    object ФайлВремяУстановить(string ИмяФайла, string ТипВремени, string Время);
    object ФайлВыбрать(string Маска, string Режим, string Действие);
    object ФайлЗанят(string ИмяФайла);
    object ФайлЗаписать(string ИмяФайла, string Режим, string Данные);
    object ФайлИскать(string Маска, string Режим);
    object ФайлКопировать(string ФайлИсточник, string ФайлПриемник);
    object ФайлМожноЧитать(string FileName);
    object ФайлОткрыть(string ИмяФайла, string Режим, string Ожидание, int РежимОжидания);
    object ФайлПереименовать(string СтароеИмя, string НовоеИмя);
    object ФайлПерекодировать(string ИмяФайла, string Режим);
    object ФайлПереместить(string ФайлИсточник, string ФайлПриемник);
    object ФайлПросмотреть(string ИмяФайла);
    object ФайлРазмер(string ИмяФайла);
    object ФайлСоздать(string Имя, string Режим);
    object ФайлСсылкаСоздать(string КодСистемы, int ТипКомпоненты, int ИД, string ИмяКомпоненты, string ИмяПредставления, string ИмяФайла, object ПараметрыКомпоненты);
    object ФайлСуществует(string FileName);
    object ФайлСчитать(string ИмяФайла);
    object ФайлУдалить(string Маска, string Режим);
    object ФмтSQLДат(DateTime Date);
    object ФмтДат(string Формат, DateTime Дата);
    object ФмтСтр(string Формат, string Строка);
    object ФмтЧсл(string Формат, float Число);
    object Формат(string Шаблон, object Аргументы);
    object ЦМассивЭлемент(object Массив, bool ПоказыватьПрогресс);
    object ЦНаборДанныхРеквизит(object НаборДанных, bool ПоказыватьПрогресс);
    object ЦПодстр(string Строка, string Разделитель);
  }
}
